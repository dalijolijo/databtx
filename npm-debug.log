0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'publish' ]
2 info using npm@3.5.2
3 info using node@v4.2.6
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/root/datacash-btx',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /root/.npm/datacash-btx/1.2.0/package.tgz not in flight; packing
9 info lifecycle datacash-btx@1.2.0~prepublish: datacash-btx@1.2.0
10 silly lifecycle datacash-btx@1.2.0~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/root/.npm/datacash-btx/1.2.0/package.tgz',
11 verbose tar pack   '/root/datacash-btx' ]
12 verbose tarball /root/.npm/datacash-btx/1.2.0/package.tgz
13 verbose folder /root/datacash-btx
14 verbose addLocalTarball adding from inside cache /root/.npm/datacash-btx/1.2.0/package.tgz
15 silly cache afterAdd datacash-btx@1.2.0
16 verbose afterAdd /root/.npm/datacash-btx/1.2.0/package/package.json not in flight; writing
17 verbose afterAdd /root/.npm/datacash-btx/1.2.0/package/package.json written
18 silly publish { name: 'datacash-btx',
18 silly publish   version: '1.2.0',
18 silly publish   description: 'post data over bitcore',
18 silly publish   main: 'index.js',
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git://github.com/dalijolijo/datacash-btx.git' },
18 silly publish   scripts:
18 silly publish    { test: 'mocha',
18 silly publish      build: 'browserify index.js --standalone datacash-btx > dist/datacash-btx.js && uglifyjs dist/datacash-btx.js > dist/datacash-btx.min.js' },
18 silly publish   keywords: [ 'btx', 'bitcore' ],
18 silly publish   author: { name: 'unwriter' },
18 silly publish   license: 'ISC',
18 silly publish   unpkg: 'dist/datacash-btx.min.js',
18 silly publish   dependencies:
18 silly publish    { 'bitcore-explorers': '^1.0.1',
18 silly publish      'bitcore-lib-btx': 'git://github.com/dalijolijo/bitcore-lib-btx.git#master' },
18 silly publish   files: [ 'dist' ],
18 silly publish   devDependencies: { mocha: '^5.1.1', 'uglify-es': '^3.3.9' },
18 silly publish   readme: '# Datacash for Bitcore (BTX)\n\n![logo](logo.png)\n\nDatacash is the simplest library for building and broadcasting Bitcore OP_RETURN transactions.\n\n---\n\n# Preview\n\nPost to the blockchain with just 4 lines of code. \n\n![code](code.png)\n\n---\n\n# Demo\n\n## 1. Datacash Transaction Composer\n\n- [Datacash transaction composer](https://dalijolijo.github.io/datacash-btx/example/composer.html)\n\n- [View source](example/composer.html)\n\n## 2. Microblogging Playground\n\nPost to both Memo.cash and Blockpress with a single interface.\n\n- [DEMO](https://dalijolijo.github.io/datacash-btx/example/playground.html)\n\n- [View source](example/playground.html)\n\n---\n\n\n# Install\n\n## 1. In node.js\n\n```\nnpm install\n```\nHint: If error SSL Error: CERT_UNTRUSTED occur you can bypass https using ``npm config set strict-ssl false``\n\nAnd then require it\n\n```\nconst datacash = require(\'datacash-btx\')\n```\n\n## 2. In browser\n\n```\n<script src=\'https://unpkg.com/datacash-btx\'></script>\n```\n\n---\n\n# Quickstart\n\nSend `"Hello from datacash"` to [memo.cash](https://memo.cash) in 5 lines of code.\n\n\n```\nconst privateKey = [YOUR PRIVATE KEY HERE];\ndatacash.send({\n  data: ["0x6d02", "Hello from datacash"],\n  cash: { key: privateKey }\n});\n```\n\nAbove code builds an `OP_RETURN` transaction with `0x6d02 hello` as push data, and broadcasts it to Bitcore network.\n\n---\n\n# Declarative Programming\n\nDatacash lets you build a transaction in a declarative manner. Here\'s an example:\n\n```\nvar config = {\n  data: ["0x6d02", "hello from datacash"],\n  cash: {\n    key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw",\n    rpc: "https://insight.bitcore.cc",\n    fee: 250,\n    to: [{\n      address: "1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81",\n      value: 1000\n    }]\n  }\n}\n```\n\nAbove config describes a transaction that:\n\n- Posts `"hello from datacash"` to [memo.cash](https://memo.cash) network (See the protocol at [https://memo.cash/protocol](https://memo.cash/protocol)),\n- paying the fee of `250` satoshis,\n- signed with a private key: `5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw`,\n- through a public JSON-RPC endpoint at [https://insight.bitcore.cc](https://insight.bitcore.cc)\n- while tipping the user `1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81` a value of `1000` satoshis.\n\nAll you need to do to invoke it is call:\n\n```\ndatacash.send(config)\n```\n\nWant to instead build a transaction but save it for later or export it? Just call:\n\n```\ndatacash.build(config, function(error, tx) {\n  console.log("Here\'s the transaction! : ", tx)\n})\n```\n\nAnd that\'s it! No complex APIs, but you can construct pretty much all kinds of OP_RETURN transactions.\n\n---\n\n# How it works\n\n`datacash-btx` is powered by [bitcore-lib-btx](https://github.com/dalijolijo/bitcore-lib-btx), which in turn is a fork of [bitcore-lib](https://github.com/bitpay/bitcore-lib), which means all the low level transactions are completely robust and secure.\n\n`datacash` was created in order to make it dead simple to construct `OP_RETURN` related transactions, but you can even use it to build regular transactions.\n\nAlso `datacash` exposes `datacash.btx` endpoint which you can use to access the underlying `bitcore-lib-btx` library. If you need more sophisticated features (in most cases you won\'t), feel free to use this feature. Best of both worlds!\n\n---\n\n# API\n\nDatacash is designed with a different philosophy than conventional Bitcoin transaction libraries.\n\nWhile **traditional Bitcoin libraries focus on sending money**, datacash is focused on **sending data**.\n\nThe API is optimized to make this as simple as possible. Datacash library has only two methods:\n\n1. `build`: For building a transaction (but not sending)\n2. `send`: For sending a transaction\n\n## 1. build\n\n"build" builds a transaction but doesn\'t broadcast it to the network.\n\nThe `build()` method takes two arguments:\n\n1. A JSON object describing the type of transaction\n2. **A callback function that will be called after building the transaction:** The callback function has two arguments. The first is an error object if something fails. The second is the constructed transaction.\n\nThe first argument--a declarative JSON object--can contain the following attributes:\n\n- `data`: For constructing `OP_RETURN` data\n- `cash`: For describing everything related to actually sending money\n- `tx`: For importing previously "built" transactions\n\n\n### A. data\n\nThe `data` attribute is used to construct human readable/processable data to post to the blockchain.\n\n\n#### 1. Buid from push data array\n\n\n```\nconst tx = {\n  data: ["0x6d02", "hello world"]\n}\ndatacash.build(tx, function(err, tx) {  \n  /**\n  * res contains the generated transaction object, powered by bitcore-lib-btx\n  * You can check it out at https://github.com/dalijolijo/bitcore-lib-btx/blob/master/lib/transaction/transaction.js\n  * Some available methods you can call on the tx object are:\n  * 1. tx.toString() => Export as string\n  * 2. tx.toObject() => Inspect the transaction as JSON object\n  **/\n});\n```\n\n**NOTE:** Each item in the `data` array can either be:\n\n1. a regular string\n2. a hex string\n\n**To use hex string, simply prefix the string with "0x"**. \n\nIn above example, we can see that the first item is `"0x6d02"`. Datacash will automatically recognize this as a hex string and interpret as a hex string (while discarding the 0x prefix before the interpretation)\n\n\n#### 2. Build from hex string representing the script\n\nThis is useful if you want to export a transaction and later recover it.\n\n```\nconst tx = {\n  data: "6a04366430320b68656c6c6f20776f726c64"\n}\ndatacash.build(tx, function(err, tx) {\n  /**\n  * res contains the generated transaction object, powered by bitcore-lib-btx\n  * You can check it out at https://github.com/dalijolijo/bitcore-lib-btx/blob/master/lib/transaction/transaction.js\n  * Some available methods you can call on the tx object are:\n  * 1. tx.toString() => Export as string\n  * 2. tx.toObject() => Inspect the transaction as JSON object\n  **/\n});\n```\n\n---\n\n### B. cash\n\nThe `cash` attribute deals with everything related to actually sending money.\n\n- `key`: Signing with private key\n- `rpc`: Specifying a JSON-RPC endpoint to broadcast through\n- `fee`: Specifying transaction fee\n- `to`: Attaching tips on top of OP_RETURN messages (Normally OP_RETURN transactions don\'t have a receiver)\n\nWhen a `cash` attribute is present, the `build()` call generates a `transaction` instead of a `script`.\n\n#### 1. `key`\n\nThe `key` attribute is mandatory. You must specify a private key in order to sign a transaction.\n\n```\nconst tx = {\n  data: ["0x6d02", "hello world"],\n  cash: { key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw" }\n}\ndatacash.build(tx, function(err, tx) {\n  /**\n  * res contains the generated transaction object\n  * (a signed transaction, since \'key\' is included)\n  **/\n})\n```\n\n\n#### 2. `rpc`\n\nThe `rpc` attribute is used to manually set the JSON-RPC endpoint you wish to broadcast through. \n\n- default: `https://insight.bitcore.cc`\n\n```\nconst tx = {\n  data: ["0x6d02", "hello world"],\n  cash: {\n    key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw",\n    rpc: "https://insight.bitcore.cc"\n  }\n};\ndatacash.build(tx, function(err, res) {\n  /**\n  * res contains the generated transaction object\n  * (a signed transaction, since \'key\' is included)\n  **/\n})\n```\n\n#### 3. `fee`\n\nThe `fee` attribute is used to specify the transaction fee in **satoshis**.\n\n- default: `300`\n\n```\nconst tx = {\n  data: ["0x6d02", "hello world"],\n  cash: {\n    key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw",\n    rpc: "https://insight.bitcore.cc",\n    fee: 250\n  }\n}\ndatacash.build(tx, function(err, res) {\n  /**\n  * res contains the generated transaction object\n  * (a signed transaction, since \'key\' is included)\n  **/\n})\n```\n\n#### 4. `to`\n\nThe `to` attribute is an array of receivers to send the OP_RETURN to. Normally this is left empty because most `OP_RETURN` transactions are meant to have no receivers. But you can also send it to multiple users. For example you can use this feature to send tips to one or more people.\n\n- default: `null`\n- Each item in the `to` array can have 2 attributes:\n  - address: Bitcore address string\n  - value: number (in satoshi)\n\n```\nconst tx = {\n  data: ["0x6d02", "hello world"],\n  cash: {\n    key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw",\n    to: [{\n      address: "1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81",\n      value: 500\n    }, {\n      address: "1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81",\n      value: 500\n    }]\n  }\n};\ndatacash.build(tx, function(err, res) {\n  /**\n  * res contains the generated transaction object\n  * (a signed transaction, since \'key\' is included.\n  * Also, the transaction includes actual coin transfer outputs,\n  * since the "to" attribute is included)\n  **/\n})\n```\n\n---\n\n### C. tx\n\nYou may want to import a previously exported transaction. This is when you use the `tx` attribute.\n\n#### 1. Importing a transaction from exported hex string\n\n```\ndatacash.build({\n  tx: "01000000014182e9844c2979d973d3e82c55d57e1a971ed2e5473557ce0414864612911aa5010000006b48304502210098f8f32cd532bc73eef1e01c3d359caf0a7aa8f3dc1eebb8011d80810c9dbe66022054c6b23d5bd9573a1e6135c39dcc31a65cab91f3b3db781995e824614e24bad9412102d024c1861ccc655ce3395bc4d8a0bdcfb929ffcd9d1a8c81d8c6fa1dfb9bd70cffffffff020000000000000000106a026d020b68656c6c6f20776f726c64c2ff0000000000001976a9142a3a6886d98776d0197611e5328ba8806c3739db88ac00000000"\n}, function(err, tx) {\n  // \'tx\' is a transaction object\n})\n```\n\n#### 2. Importing an unsigned transaction and building a signed transaction\n\nYou can export an unsigned transaction, and later import and sign it to create a signed transaction, simply by supporting a `cash.key` attribute.\n\n```\n// import an unsigned transaction and sign it\ndatacash.build({\n  tx: "01000000014182e9844c2979d973d3e82c55d57e1a971ed2e5473557ce0414864612911aa5010000006b48304502210098f8f32cd532bc73eef1e01c3d359caf0a7aa8f3dc1eebb8011d80810c9dbe66022054c6b23d5bd9573a1e6135c39dcc31a65cab91f3b3db781995e824614e24bad9412102d024c1861ccc655ce3395bc4d8a0bdcfb929ffcd9d1a8c81d8c6fa1dfb9bd70cffffffff020000000000000000106a026d020b68656c6c6f20776f726c64c2ff0000000000001976a9142a3a6886d98776d0197611e5328ba8806c3739db88ac00000000",\n  cash: {\n    key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw"\n  }\n}, function(err, tx) {\n  // \'tx\' is a signed transaction object\n})\n```\n\nNotice how in addition to the `tx` attribute we\'ve added the `cash.key` attribute. This will import the unsigned transaction and sign it.\n\n\n#### 3. Importing and sending a signed transaction from exported hex string\n\nIf you already have a signed transaction object, you can simply send it away without any additional steps.\n\n```\ndatacash.send({\n  tx: "01000000014182e9844c2979d973d3e82c55d57e1a971ed2e5473557ce0414864612911aa5010000006b48304502210098f8f32cd532bc73eef1e01c3d359caf0a7aa8f3dc1eebb8011d80810c9dbe66022054c6b23d5bd9573a1e6135c39dcc31a65cab91f3b3db781995e824614e24bad9412102d024c1861ccc655ce3395bc4d8a0bdcfb929ffcd9d1a8c81d8c6fa1dfb9bd70cffffffff020000000000000000106a026d020b68656c6c6f20776f726c64c2ff0000000000001976a9142a3a6886d98776d0197611e5328ba8806c3739db88ac00000000"\n}, function(err, hash) {\n  // \'hash\' is the transaction hash\n})\n```\n\n---\n\n## 2. send\n\nInstead of just building, you can build AND send. Same syntax as `build()`.\n\nThe only difference is the callback function.\n\n- build() returns a constructed transaction object through the callback\n- send() returns a transaction hash (since it\'s already been sent)\n\n### A. Sending from data and cash\n\n```\nconst tx = {\n  data: ["0x6d02", "hello world"])\n  cash: { key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw" }\n}\ndatacash.send(tx, function(err, res) {\n  console.log(res)\n})\n```\n\n### B. Building an UNSIGNED transaction and exporting, and then later importing and sending the transaction in separate steps\n\n```\n// Build and export an unsigned transaction for later usage\nvar exportedTxHex = "";\nconst tx = {\n  data: ["0x6d02", "hello world"]\n}\ndatacash.build(tx, function(err, res) {\n  exportedTxHex = res;\n})\n\n// Later import exportedTxHex and sign it with privatkey, and broadcast, all in one method:\ndatacash.send({\n  tx: exportedTx,\n  cash: { key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw" }\n}, function(err, hash) {\n  // hash contains the transaction hash after the broadcast\n})\n```\n\n### C. Building a SIGNED transaction and exporting, and then later importing and sending\n\nThis time since the exported transaction is already signed, no need for additional `cash.key` attriute when sending later\n\n\n```\n// Build and export an unsigned transaction for later usage\nvar exportedSignedTxHex = "";\nconst tx = {\n  data: ["0x6d02", "hello world"],\n  cash: { key: "5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw" }\n}\ndatacash.build(tx, function(err, res) {\n  exportedSignedTxHex = res;\n})\n\n// Later import exportedTxHex and broadcast, all in one method:\ndatacash.send({\n  tx: exportedSignedTx,\n}, function(err, hash) {\n  // hash contains the transaction hash after the broadcast\n})\n```\n\n---\n\n# Advanced\n\nDatacash depends on two powerful libraries for low level stuff.\n\n1. bitcore-lib-btx: https://github.com/dalijolijo/bitcore-lib-btx\n2. bitcore-explorers: https://github.com/bitpay/bitcore-explorers\n\nWhile Datacash is designed to be the simplest possible way to write data to the blockchain, you may want to sometimes access the low level libraries that power datacash.\n\nDatacash exposes additional endpoints so you can simply access these libraries without having to install or include any additional libraries.\n\n## 1. datacash.btx\n\nThis endpoint exposes the [bitcore-lib-btx](https://github.com/dalijolijo/bitcore-lib-btx) library object. Basically by referncing `btx` you have access to the entire bitcore-lib-btx library.\n\n```\nconst privateKey = new datacash.btx.PrivateKey();\nconst address = privateKey.toAddress();\nconsole.log(address.toString()) // 15WZwpw3BofscM2u43ji85BXucai5YGToL\n```\n\n## 2. datacash.connect\n\nThis endpoint is used to access the [bitcore-explorers](https://github.com/bitpay/bitcore-explorers) library.\n\nUsing this endpoint you can connect to a public JSON-RPC endpoint to let you make various direct JSON-RPC function calls such as `getUnspentUtxos`, etc. (Basically it instantiates and returns the `insight` object from https://github.com/bitpay/bitcore-explorers)\n\n### Syntax\n\n```\ndatacash.connect([RPC ENDPOINT]).[METHOD]\n```\n\nIf you leave the `RPC ENDPOINT` part out, it will automatically use the default https://insight.bitcore.cc node\n\n### Example 1: Connecting to default node and calling `getUnspentUtxos()` method:\n\n```\ndatacash.connect().getUnspentUtxos("14xMz8rKm4L83RuZdmsHXD2jvENZbv72vR", function(err, utxos) {\n  if (err) {\n    console.log("Error: ", err)\n  } else {\n    console.log(utxos) \n  }\n})\n```\n\n### Example 2. Specifying a JSON-RPC endpoint\n\n```\ndatacash.connect(\'https://insight.bitcore.cc\').getUnspentUtxos("14xMz8rKm4L83RuZdmsHXD2jvENZbv72vR", function(err, utxos) {\n  if (err) {\n    console.log("Error: ", err)\n  } else {\n    console.log(utxos) \n  }\n});\n```\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '887fa540b338224eeeeb3f28fcec62a6e8add0f6',
18 silly publish   bugs: { url: 'https://github.com/dalijolijo/datacash-btx/issues' },
18 silly publish   homepage: 'https://github.com/dalijolijo/datacash-btx#readme',
18 silly publish   _id: 'datacash-btx@1.2.0',
18 silly publish   _shasum: '750fdadd5dfe0d7887e63a598002c70c1b11de26',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name datacash-btx
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/datacash-btx
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /root/.npm/datacash-btx/1.2.0/package.tgz
26 verbose request uri https://registry.npmjs.org/datacash-btx
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 4:38:58 PM
29 verbose request using bearer token for auth
30 verbose request id fcbe5cea1fc4e9f0
31 http request PUT https://registry.npmjs.org/datacash-btx
32 http 403 https://registry.npmjs.org/datacash-btx
33 verbose headers { date: 'Sat, 13 Apr 2019 16:39:00 GMT',
33 verbose headers   'content-type': 'application/json',
33 verbose headers   'transfer-encoding': 'chunked',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'set-cookie': [ '__cfduid=dbc4e4b9799a5c3287f1918eaac9110451555173538; expires=Sun, 12-Apr-20 16:38:58 GMT; path=/; domain=.registry.npmjs.org; HttpOnly' ],
33 verbose headers   'cf-ray': '4c6edf9a4c4bc831-AMS',
33 verbose headers   'expect-ct': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"',
33 verbose headers   vary: 'Accept-Encoding',
33 verbose headers   server: 'cloudflare',
33 verbose headers   'content-encoding': 'gzip' }
34 verbose request invalidating /root/.npm/registry.npmjs.org/datacash-btx on PUT
35 error publish Failed PUT 403
36 verbose stack Error: You cannot publish over the previously published versions: 1.2.0. : datacash-btx
36 verbose stack     at makeError (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:264:12)
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:252:14)
36 verbose stack     at /usr/share/npm/node_modules/npm-registry-client/lib/request.js:178:7
36 verbose stack     at Gunzip.onEnd (zlib.js:227:5)
36 verbose stack     at emitNone (events.js:72:20)
36 verbose stack     at Gunzip.emit (events.js:166:7)
36 verbose stack     at endReadableNT (_stream_readable.js:905:12)
36 verbose stack     at nextTickCallbackWith2Args (node.js:441:9)
36 verbose stack     at process._tickCallback (node.js:355:17)
37 verbose statusCode 403
38 verbose pkgid datacash-btx
39 verbose cwd /root/datacash-btx
40 error Linux 4.4.0-134-generic
41 error argv "/usr/bin/nodejs" "/usr/bin/npm" "publish"
42 error node v4.2.6
43 error npm  v3.5.2
44 error code E403
45 error You cannot publish over the previously published versions: 1.2.0. : datacash-btx
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
